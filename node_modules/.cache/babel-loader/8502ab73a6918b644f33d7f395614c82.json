{"ast":null,"code":"var _jsxFileName = \"/Users/Lapin/ItProjects/udemy/react-pokemon-app/src/components/pokemon-form.tsx\";\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport formatType from '../helpers/format-type';\nimport PokemonService from \"../services/pokemon-service\";\n\nconst PokemonForm = ({\n  pokemon,\n  isEditForm\n}) => {\n  const [form, setForm] = useState({\n    picture: {\n      value: pokemon.picture\n    },\n    name: {\n      value: pokemon.name,\n      isValid: true\n    },\n    hp: {\n      value: pokemon.hp,\n      isValid: true\n    },\n    cp: {\n      value: pokemon.cp,\n      isValid: true\n    },\n    types: {\n      value: pokemon.types,\n      isValid: true\n    }\n  });\n  const history = useHistory();\n  const types = ['Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik', 'Poison', 'Fée', 'Vol', 'Combat', 'Psy'];\n\n  const hasType = type => {\n    return form.types.value.includes(type);\n  };\n\n  const handleInputChange = e => {\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    const newField = {\n      [fieldName]: {\n        value: fieldValue\n      }\n    };\n    setForm({ ...form,\n      ...newField\n    });\n  };\n\n  const isAddForm = () => {\n    return !isEditForm;\n  };\n\n  const validateForm = () => {\n    let newForm = form; //validator picture\n\n    if (isAddForm()) {\n      const starts = \"https://assets.pokemon.com/assets/cms2/img/pokedex/\";\n      const ends = \".png\";\n\n      if (!form.picture.value.startsWith(starts) || !form.picture.value.endsWith(ends)) {\n        const errorMsg = \"L'url n'est pas valide.\";\n      }\n    } // Validator name\n\n\n    if (!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n      const errorMsg = 'Le nom du pokémon est requis (1-25).';\n      const newField = {\n        value: form.name.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          name: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.name.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          name: newField\n        }\n      };\n    } // Validator hp\n\n\n    if (!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n      const newField = {\n        value: form.hp.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          hp: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.hp.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          hp: newField\n        }\n      };\n    } // Validator cp\n\n\n    if (!/^[0-9]{1,2}$/.test(form.cp.value)) {\n      const errorMsg = 'Les dégâts du pokémon sont compris entre 0 et 99';\n      const newField = {\n        value: form.cp.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          cp: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.cp.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          cp: newField\n        }\n      };\n    }\n\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n  };\n\n  const isTypesValid = type => {\n    if (form.types.value.length === 1 && hasType(type)) {\n      return false;\n    }\n\n    ;\n\n    if (form.types.value.length >= 3 && !hasType(type)) {\n      return false;\n    }\n\n    ;\n    return true;\n  };\n\n  const selectType = (type, e) => {\n    const checked = e.target.checked;\n    let newField;\n\n    if (checked) {\n      // Si l'utilisateur coche un type, à l'ajoute à la liste des types du pokémon.\n      const newTypes = form.types.value.concat([type]);\n      newField = {\n        value: newTypes\n      };\n    } else {\n      // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\n      const newTypes = form.types.value.filter(currentType => currentType !== type);\n      newField = {\n        value: newTypes\n      };\n    }\n\n    setForm({ ...form,\n      ...{\n        types: newField\n      }\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isFormValid = validateForm();\n\n    if (isFormValid) {\n      pokemon.name = form.name.value;\n      pokemon.hp = form.hp.value;\n      pokemon.cp = form.cp.value;\n      pokemon.types = form.types.value;\n      PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\n    }\n  };\n\n  const deletePokemon = () => {\n    PokemonService.deletePokemon(pokemon).then(() => history.push('/pokemons'));\n  };\n\n  return React.createElement(\"form\", {\n    onSubmit: e => handleSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col s12 m8 offset-m2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card hoverable\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-image\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: pokemon.picture,\n    alt: pokemon.name,\n    style: {\n      width: '250px',\n      margin: '0 auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"btn-floating halfway-fab waves-effect waves-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    onClick: deletePokemon,\n    className: \"material-icons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"delete\"))), React.createElement(\"div\", {\n    className: \"card-stacked\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"Nom\"), React.createElement(\"input\", {\n    id: \"name\",\n    name: \"name\",\n    type: \"text\",\n    className: \"form-control\",\n    onChange: e => handleInputChange(e),\n    value: form.name.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }), form.name.error && React.createElement(\"div\", {\n    className: \"card-panel red accent-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, form.name.error)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"hp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, \"Point de vie\"), React.createElement(\"input\", {\n    id: \"hp\",\n    name: \"hp\",\n    type: \"number\",\n    className: \"form-control\",\n    onChange: e => handleInputChange(e),\n    value: form.hp.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }), form.hp.error && React.createElement(\"div\", {\n    className: \"card-panel red accent-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, form.hp.error)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"cp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, \"D\\xE9g\\xE2ts\"), React.createElement(\"input\", {\n    id: \"cp\",\n    name: \"cp\",\n    type: \"number\",\n    className: \"form-control\",\n    onChange: e => handleInputChange(e),\n    value: form.cp.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }), form.cp.error && React.createElement(\"div\", {\n    className: \"card-panel red accent-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, form.cp.error)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, \"Types\"), types.map(type => React.createElement(\"div\", {\n    key: type,\n    style: {\n      marginBottom: '10px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: type,\n    type: \"checkbox\",\n    className: \"filled-in\",\n    value: type,\n    checked: hasType(type),\n    disabled: !isTypesValid(type),\n    onChange: e => selectType(type, e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: formatType(type),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, type))))))), React.createElement(\"div\", {\n    className: \"card-action center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, \"Valider\")))))));\n};\n\nexport default PokemonForm;","map":{"version":3,"sources":["/Users/Lapin/ItProjects/udemy/react-pokemon-app/src/components/pokemon-form.tsx"],"names":["React","useState","useHistory","formatType","PokemonService","PokemonForm","pokemon","isEditForm","form","setForm","picture","value","name","isValid","hp","cp","types","history","hasType","type","includes","handleInputChange","e","fieldName","target","fieldValue","newField","isAddForm","validateForm","newForm","starts","ends","startsWith","endsWith","errorMsg","test","error","isTypesValid","length","selectType","checked","newTypes","concat","filter","currentType","handleSubmit","preventDefault","isFormValid","updatePokemon","then","push","id","deletePokemon","width","margin","map","marginBottom"],"mappings":"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","sourcesContent":["import React, {FormEvent, FunctionComponent, useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/format-type';\nimport PokemonService from \"../services/pokemon-service\";\n\ntype Props = {\n    pokemon: Pokemon,\n    isEditForm: boolean\n};\n\ntype Field = {\n    value? : any,\n    error?: string,\n    isValid?: boolean\n};\n\ntype Form = {\n    picture: Field,\n    name: Field,\n    hp: Field,\n    cp: Field,\n    types: Field\n};\n\nconst PokemonForm: FunctionComponent<Props> = ({pokemon, isEditForm}) => {\n\n    const [form, setForm] = useState<Form>({\n        picture : {value: pokemon.picture},\n        name : {value : pokemon.name, isValid : true},\n        hp : {value : pokemon.hp, isValid : true},\n        cp : {value : pokemon.cp, isValid : true},\n        types : {value : pokemon.types, isValid : true}\n    });\n\n    const history = useHistory();\n\n    const types: string[] = [\n        'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n        'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\n    ];\n\n    const hasType = (type : string) : boolean => {\n        return form.types.value.includes(type);\n    };\n\n    const handleInputChange = (e : React.ChangeEvent<HTMLInputElement>) => {\n        const fieldName: string = e.target.name;\n        const fieldValue: string = e.target.value;\n        const newField: Field = {[fieldName]: {value: fieldValue}};\n\n        setForm({...form, ...newField});\n    };\n\n    const isAddForm = () : boolean => {\n        return !isEditForm;\n    }\n\n    const validateForm = () => {\n        let newForm: Form = form;\n\n        //validator picture\n        if (isAddForm()){\n            const starts = \"https://assets.pokemon.com/assets/cms2/img/pokedex/\"\n            const ends = \".png\";\n            if (!form.picture.value.startsWith(starts)||!form.picture.value.endsWith(ends)){\n                const errorMsg : string = \"L'url n'est pas valide.\";\n                \n            }\n        }\n\n        // Validator name\n        if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n            const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\n            const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\n            newForm = { ...newForm, ...{ name: newField } };\n        } else {\n            const newField: Field = { value: form.name.value, error: '', isValid: true };\n            newForm = { ...newForm, ...{ name: newField } };\n        }\n\n        // Validator hp\n        if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n            const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n            const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\n            newForm = { ...newForm, ...{ hp: newField } };\n        } else {\n            const newField: Field = { value: form.hp.value, error: '', isValid: true };\n            newForm = { ...newForm, ...{ hp: newField } };\n        }\n\n        // Validator cp\n        if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n            const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\n            const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\n            newForm = { ...newForm, ...{ cp: newField } };\n        } else {\n            const newField: Field = { value: form.cp.value, error: '', isValid: true };\n            newForm = { ...newForm, ...{ cp: newField } };\n        }\n\n        setForm(newForm);\n        return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n    };\n\n    const isTypesValid = (type: string) : boolean => {\n        if (form.types.value.length === 1 && hasType(type)) {return false};\n        if (form.types.value.length >= 3 && !hasType(type)) {return false};\n        return true;\n    };\n\n\n\n    const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n        const checked = e.target.checked;\n        let newField: Field;\n\n        if(checked) {\n            // Si l'utilisateur coche un type, à l'ajoute à la liste des types du pokémon.\n            const newTypes: string[] = form.types.value.concat([type]);\n            newField = { value: newTypes };\n        } else {\n            // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\n            const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\n            newField = { value: newTypes };\n        }\n\n        setForm({...form, ...{ types: newField }});\n    };\n\n    const handleSubmit = (e : React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const isFormValid = validateForm();\n        if (isFormValid) {\n            pokemon.name = form.name.value;\n            pokemon.hp = form.hp.value;\n            pokemon.cp = form.cp.value;\n            pokemon.types = form.types.value;\n\n            PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\n        }\n    };\n\n    const deletePokemon = () => {\n        PokemonService.deletePokemon(pokemon).then(() => history.push('/pokemons'));\n    };\n\n    return (\n        <form onSubmit={e => handleSubmit(e)}>\n            <div className=\"row\">\n                <div className=\"col s12 m8 offset-m2\">\n                    <div className=\"card hoverable\">\n                        <div className=\"card-image\">\n                            <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n                            <span className=\"btn-floating halfway-fab waves-effect waves-light\">\n                                <i onClick={deletePokemon} className=\"material-icons\">delete</i>\n                            </span>\n                        </div>\n                        <div className=\"card-stacked\">\n                            <div className=\"card-content\">\n                                {/* Pokemon name */}\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"name\">Nom</label>\n                                    <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" onChange={e=>handleInputChange(e)} value={form.name.value}></input>\n                                    {form.name.error &&\n                                    <div className=\"card-panel red accent-1\">\n                                        {form.name.error}\n                                    </div>\n                                    }\n                                </div>\n                                {/* Pokemon hp */}\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"hp\">Point de vie</label>\n                                    <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" onChange={e=>handleInputChange(e)}  value={form.hp.value}></input>\n                                    {form.hp.error &&\n                                    <div className=\"card-panel red accent-1\">\n                                        {form.hp.error}\n                                    </div>\n                                    }\n                                </div>\n                                {/* Pokemon cp */}\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"cp\">Dégâts</label>\n                                    <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" onChange={e=>handleInputChange(e)}  value={form.cp.value}></input>\n                                    {form.cp.error &&\n                                    <div className=\"card-panel red accent-1\">\n                                        {form.cp.error}\n                                    </div>\n                                    }\n                                </div>\n                                {/* Pokemon types */}\n                                <div className=\"form-group\">\n                                    <label>Types</label>\n                                    {types.map(type => (\n                                        <div key={type} style={{marginBottom: '10px'}}>\n                                            <label>\n                                                <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} checked={hasType(type)} disabled={!isTypesValid(type)} onChange={e => selectType(type,e)}></input>\n                                                <span>\n                          <p className={formatType(type)}>{ type }</p>\n                        </span>\n                                            </label>\n                                        </div>\n                                    ))}\n                                </div>\n                            </div>\n                            <div className=\"card-action center\">\n                                {/* Submit button */}\n                                <button type=\"submit\" className=\"btn\">Valider</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </form>\n    );\n};\n\nexport default PokemonForm;"]},"metadata":{},"sourceType":"module"}